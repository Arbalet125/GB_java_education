// package GB_java_education.first_seminar.DZ_1_seminar;

//import java.util.Scanner;

public class main {
    public static void firstTask(String[] args){
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //Реализовать таблицу истинности т е у нас есть p = false и q = true . Чему будет ранво p & q == ? , ? - вынести в таблицу.//
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
/*  boolean p;
    boolean q;
    
    Scanner iScanner = new Scanner(System.in); // пусть пользователь сам решает, какие значения принимает q и p
    System.out.println("Какое значение принимает p? Введите false или true");
    String var = iScanner.nextLine();
    String var1 = "false"; 
    
    System.out.println("Какое значение принимает q? Введите false или true");
    String var2 = iScanner.nextLine();
    String var3 == "false"; 
    iScanner.close();

    q = (var.equals (var1)); //посмотрел, как можно сравнивать строки, попробовал так.
    p = (var2.equals (var3));

    boolean x = p & q;
    boolean y = p|q;
    boolean z = p^q;
    boolean w = !p;

    System.out.println("p\tq\tp&q\tp|q\tp^q\t!p");
    System.out.println(p+"\t"+ q +"\t" + x +"\t" + y +"\t" + z +"\t"+ w); */
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }
    public static void secondTask(String[] args){
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //1.Что такое байт-код и почему он так важен для интернет-программирования на языке Java?//
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /* Байт-код — это набор команд, который виртуальная машина Java (JVM) применяет для запуска программы. Поскольку байт-код, 
    сгенерированный для программы, не зависит от платформы, где она запущена, вы можете без проблем запускать свою программу 
    на любой машине, на которой есть JVM для интерпретации байт-кода. 
    По крайней мере, такое определение я нашел в интернете. 
    Насколько я понял, байт-код в 80% случаев вообще не нужен среднестатистическому программисту. Разве что, дабы посмотреть
    что там под капотом у компилятора происходит. Но, да, интересно.*/
    }
    public static void thirdTask(String[] args){
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //2. Каковы три ключевых принuипа объектно-ориентированного программирования?//
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Объектно-ориентированное программирование обладает рядом принципов. Представление об их количестве расходится. 
    Кто-то утверждает, что их три (старая школа программистов), кто-то, что их четыре (новая школа программистов):
    1. Абстрация - рассматривается только новой школой
    2. Инкапсуляция - 
    3. Наследование
    4. Полиморфизм
 */
}
public static void fourthTask(String[] args){
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //3. С чего начинается выполнение программы на Java?//
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /* Если коротко - то с точки входа. Обычно это что-то вроде: "public static void main(String[] args) {"  
    - собственно объявление метода main. Метод (или часто говорят функция) main это точка входа в любой java-программер. 
    Именно отсюда начинается выполнение кода.
    */
}
public static void fifthTask(String[] args){
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //4. Что такое переменная?//
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /* Переменная — это контейнер, в котором может храниться некоторое значение данных для дальнейшего 
    использования в программе.
    */
}
public static void sixthTask(String[] args){
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //5. Какое из перечисленных ниже имен переменных недопустимо?
    //А. count
    //Б. $count
    //В. count27
    //Г. 67count//
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /* Ответ - Г. Потому что перемнная в Java не может начинаться с цифры.
    */
}
public static void seventhTask(String[] args){
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //6. Как создаются однострочный и мноrострочный комментарии//
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /* - Однострочные комментарии – С их помощью вы можете прокомментировать отдельные строки. Компилятор игнорирует все от // 
    до конца строки.
    - Многострочные комментарии – Можете прокомментировать несколько строк. Компилятор игнорирует все от / * до * /.
    */
}
public static void eighthTask(String[] args){
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //Как выглядит общая форма условного оператора if? Как выглядит общая форма uикла for?//
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /* 
    Для оператора if: 
    if (условие) {
    //действие(-я), которые выполняются, если условие истинно;
    }
    else if (условие) {
    //действие(-я), которые выполняются, если условие истинно;
    }
    else if (условие) {
    //действие(-я), которые выполняются, если условие истинно;
    }
    ....
    else {
    //действие(-я), которые выполняются, если условие истинно;
    }
    
    Для оператора for:
    for (инициализация; условие; итерация) {
    // действия, которые выполняются
    }
    
    */
}
public static void ninthTask(String[] args){
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //8. Как создать блок кода?//
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /* 
    Cтатический блок можно создать, используя ключевое слово static, за которым следуют фигурные скобки. 
    */
}
public static void tenthTask(String[] args){
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //11. Если при вводе кода программы вы допустите опечатку, то какого рода сообщение
    //об ошибке получите?//
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /* 
    Сообщение об ошибке синтаксиса (Syntax error on token "..."). 
    */
}
public static void eleventhTask(String[] args){
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //12. Имеет ли значение, с какой именно позиuии в строке начинается инструкuия?//
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /* 
    Откровенно говоря, понятия не имею, что такое "инструкция". Не нашел ответа. Но, думаю, что не имеет, ибо Java все равно, 
    где форматируется код.
    */
}

}